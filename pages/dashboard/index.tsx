import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import Layout from '../../components/Layout';
import QuoteCard from '../../components/QuoteGenerator';
import {
  buttonStylesStandard,
  dashboardFrame,
  heroSectionHeading,
  heroSectionHeadingImageContainer,
  pageContainer,
  singleTileContainer,
  tileFormStyle,
  tileGrid,
} from '../../styles/styles';
import { getMood } from '../../util/database';
import { Tile } from '../../util/types';

type Props = {
  username?: string;
  moods: Mood[];
  userId: number;
  tiles: Tile[];
};

type Mood = {
  id: number;
  title: string;
};

export default function Tiles(props: Props) {
  const [errors, setErrors] = useState<any[]>();
  const [day, setDay] = useState('');
  const router = useRouter();
  // console.log(props);
  return (
    <Layout username={props.username}>
      <Head>
        <title>(re)mind | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section css={pageContainer}>
        <div css={heroSectionHeadingImageContainer}>
          <div css={heroSectionHeading}>
            <div css={dashboardFrame}>
              <h2 className="header1-text">Dashboard</h2>
              <div>
                <a href="#tiles">Take me to tiles directly</a>
              </div>
              <form
                css={tileFormStyle}
                onSubmit={async (event) => {
                  event.preventDefault();
                  // console.log(props.userId);
                  const response = await fetch(`/api/dashboard/create`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    // send request body to API route
                    body: JSON.stringify({
                      day: day,
                      userId: props.userId,
                      moodId: Number(event.currentTarget.mood.value),
                      achievements: event.currentTarget.achievements.value,
                      gratitude: event.currentTarget.gratitude.value,
                    }),
                  });

                  const tileResponseJson = await response.json();
                  console.log(tileResponseJson);

                  // Check if there is an errorMessage inside the json and update state
                  if ('errors' in tileResponseJson) {
                    setErrors(tileResponseJson.errors);
                    return;
                  }
                  router.reload();
                }}
              >
                <div>
                  <label htmlFor="date-picker">
                    <h2>New Entry</h2>
                  </label>
                </div>
                <input
                  type="date"
                  placeholder="30/11/2021"
                  value={day}
                  min="2021-11-01"
                  max="2022-12-31"
                  required
                  onChange={(event) => {
                    setDay(event.currentTarget.value);
                  }}
                />

                <div>
                  <label htmlFor="gratitude">
                    <h2>Set your mood for the day</h2>
                  </label>
                </div>
                <select id="mood" name="mood">
                  <option value="">Select Mood</option>
                  {props.moods.map((mood) => {
                    return (
                      <option key={mood.id} value={mood.id}>
                        {mood.title}
                      </option>
                    );
                  })}
                </select>
                <div>
                  <label htmlFor="achievements">
                    <h2>Goals & Achievements</h2>
                  </label>
                </div>

                <div>
                  <textarea
                    name="achievements"
                    placeholder="Add some goals & achievements for today..."
                    max-length="10000"
                  />
                </div>
                <div>
                  <label htmlFor="gratitude">
                    <h2>Gratitude Journal</h2>
                  </label>
                </div>
                <div>
                  <textarea
                    name="gratitude"
                    placeholder="What are you grateful for today?"
                    max-length="10000"
                  />
                </div>
                <QuoteCard />
                <div>
                  <button css={buttonStylesStandard}>Save</button>
                </div>
              </form>
            </div>
          </div>
        </div>
        <a id="tiles">
          <div>
            <h2>My Daily Entries</h2>
          </div>
        </a>
        <div css={tileGrid}>
          {props.tiles.map((tile) => {
            return (
              <div
                className="card"
                key={`tile-li-${tile.id}`}
                css={singleTileContainer}
              >
                <div>
                  <img src="/images/logo.png" alt="(re)mind logo on tile" />
                </div>
                <div className="content">
                  <Link passHref href={`/dashboard/${tile.id}`}>
                    <h2>
                      <a>{tile.day}</a>
                    </h2>
                  </Link>
                  <div>{tile.achievements}</div>
                  <div>{tile.gratitude}</div>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { getValidSessionByToken } = await import('../../util/database');

  // Authorization: Allow only logged-in users
  const isValidSession = await getValidSessionByToken(
    context.req.cookies.sessionToken,
  );
  const sessionToken = context.req.cookies.sessionToken;

  if (!isValidSession) {
    return {
      redirect: {
        permanent: false,
        destination: '/login?returnTo=/dashboard',
      },
    };
  }
  const baseUrl = process.env.BASE_URL;
  const tileResponse = await fetch(`${baseUrl}/api/dashboard/`, {
    method: 'GET',
    headers: {
      cookie: `sessionToken=${sessionToken}`,
    },
    credentials: 'include',
  });
  const tiles = await tileResponse.json();
  const moods = await getMood();

  return {
    props: { moods, userId: isValidSession.userId, tiles },
  };
}
