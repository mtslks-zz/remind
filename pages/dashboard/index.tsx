import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { AllTiles } from '../../components/AllTiles';
import Layout from '../../components/Layout';
import {
  headingStyle,
  heroSection,
  heroSectionHeading,
  heroSectionHeadingImageContainer,
  pageContainer,
  tileFormStyle,
} from '../../styles/styles';
import { getMood } from '../../util/database';
import { Tile, User } from '../../util/types';

const singleTileContainer = css`
  background-image: linear-gradient(180deg, #6eb9e4 0%, #abd3cf 100%);
  border-radius: 10px;
  box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;
`;

const tileButtonRow = css`
  display: flex;
  align-items: center;
`;

const tileGrid = css`
  display: grid;
  grid-template-rows: repeat(4, 1fr);
  grid-template-columns: repeat(4, 1fr);
  grid-gap: 20px;
  a {
    display: block;
    text-align: center;
    text-decoration: none;
    padding: 3px;
    margin: 0;
  }
  * {
    margin: 0;
    padding: 0px;
    box-sizing: border-box;
  }
  body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  .card {
    width: 250px;
    height: 230px;
    background-image: linear-gradient(180deg, #6eb9e4 0%, #abd3cf 100%);
    position: relative;
    border-radius: 15px;
    cursor: pointer;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.123);
  }
  .card img {
    position: absolute;
    padding: 50px 50px 0px 50px;
    width: 100%;
  }
  .content {
    position: absolute;
    width: 100%;
    bottom: 0;
    height: 50px;
    padding: 0.6em 2em;
    font-size: 16px;
    background: rgba(255, 255, 255, 0);
    backdrop-filter: blur(20px);
    border-radius: 10px;
    transform: scale(0.9);
    color: white;
    border: none;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.144);
    overflow: hidden;
    transition: all 0.4s;
  }
  .content div {
    font-size: 1.3em;
  }
  .card:hover .content {
    height: 220px;
  }
`;

type Props = {
  username?: string;
  // firstName?: string;
  moods: Mood[];
  userId: number;
  // user: User;
  tiles: Tile[];
};

type Mood = {
  id: number;
  title: string;
};

export default function Tiles(props: Props) {
  const [errors, setErrors] = useState<any[]>();
  const [day, setDay] = useState('');
  const router = useRouter();
  // console.log(props);
  return (
    <Layout username={props.username}>
      <div>
        <Head>
          <title>(re)mind | Dashboard</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div css={pageContainer}>
          <div css={heroSectionHeadingImageContainer}>
            <div css={heroSectionHeading}>
              <div css={headingStyle}>
                <h2 className="header1-text">Dashboard</h2>
                <form
                  css={tileFormStyle}
                  onSubmit={async (event) => {
                    event.preventDefault();
                    console.log(props.userId);

                    const response = await fetch(`/api/dashboard/create`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      // send request body to API route
                      body: JSON.stringify({
                        day: day,
                        userId: props.userId,
                        moodId: Number(event.currentTarget.mood.value),
                        achievements: event.currentTarget.achievements.value,
                        gratitude: event.currentTarget.gratitude.value,
                      }),
                    });

                    const tileResponseJson = await response.json();
                    console.log(tileResponseJson);

                    // Check if there is an errorMessage inside the json and update state
                    if ('errors' in tileResponseJson) {
                      setErrors(tileResponseJson.errors);
                      return;
                    }
                    router.reload();
                  }}
                >
                  <div>
                    <label htmlFor="date-picker">
                      <h2>Select date for entry</h2>
                    </label>
                  </div>
                  <input
                    type="date"
                    placeholder="30/11/2021"
                    value={day}
                    min="2021-11-01"
                    max="2022-12-31"
                    required
                    onChange={(event) => {
                      setDay(event.currentTarget.value);
                    }}
                  />

                  <div>
                    <label htmlFor="gratitude">
                      <h2>Set your mood for the day</h2>
                    </label>
                  </div>
                  <select id="mood" name="mood">
                    <option value="">Select Mood</option>
                    {props.moods.map((mood) => {
                      return (
                        <option key={mood.id} value={mood.id}>
                          {mood.title}
                        </option>
                      );
                    })}
                  </select>
                  <div>
                    <label htmlFor="achievements">
                      <h2>Goals & Achievements</h2>
                    </label>
                  </div>

                  <div>
                    <textarea
                      name="achievements"
                      placeholder="Add some goals & achievements for today..."
                      max-length="10000"
                    />
                  </div>
                  <div>
                    <label htmlFor="gratitude">
                      <h2>Gratitude Journal</h2>
                    </label>
                  </div>
                  <div>
                    <textarea
                      name="gratitude"
                      placeholder="What are you grateful for today?"
                      max-length="10000"
                    />
                  </div>

                  <div>
                    <button>Save</button>
                  </div>
                </form>
              </div>
              <div>
                <h2>Your Tile Overview</h2>
              </div>
              <div css={tileGrid}>
                {/* <div className="card">
                  <div className="content"> */}
                {props.tiles.map((tile) => {
                  return (
                    <div
                      className="card"
                      key={`tile-li-${tile.id}`}
                      css={singleTileContainer}
                    >
                      <div>
                        <img src="/images/logo.png" alt="logo" />
                      </div>
                      <div className="content">
                        <Link passHref href={`/dashboard/${tile.id}`}>
                          <h2>
                            <a>{tile.day}</a>
                          </h2>
                        </Link>
                        <div>{tile.achievements}</div>
                        <div>{tile.gratitude}</div>
                      </div>
                      <div css={tileButtonRow}>
                        {/* TO-DO Delete tile functionality */}
                        {/* <button
                          className="button-general"
                          onClick={async (event) => {
                            event.preventDefault();
                            if (
                              !window.confirm(
                                `Are you sure you want to delete this tile? This cannot be reversed!`,
                              )
                            ) {
                              return;
                            }

                            const response = await fetch(
                              `/api/dashboard/${tile.id}`,
                              {
                                method: 'DELETE',
                                headers: {
                                  'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                  day: day,
                                  userId: props.userId,
                                }),
                              },
                            );

                            await response.json();

                            // Reload page after tile has been deleted
                            router.reload();
                          }}
                        >
                          Delete
                        </button> */}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            {/* </div>
            </div> */}
          </div>
        </div>
      </div>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { getValidSessionByToken } = await import('../../util/database');

  // Authorization: Allow only logged-in users
  const isValidSession = await getValidSessionByToken(
    context.req.cookies.sessionToken,
  );
  const sessionToken = context.req.cookies.sessionToken;

  if (!isValidSession) {
    return {
      redirect: {
        permanent: false,
        destination: '/login?returnTo=/dashboard',
      },
    };
  }
  const baseUrl = process.env.BASE_URL;
  const tileResponse = await fetch(`${baseUrl}/api/dashboard/`, {
    method: 'GET',
    headers: {
      cookie: `sessionToken=${sessionToken}`,
    },
    credentials: 'include',
  });
  const tiles = await tileResponse.json();
  const moods = await getMood();

  return {
    props: { moods, userId: isValidSession.userId, tiles },
  };
}
