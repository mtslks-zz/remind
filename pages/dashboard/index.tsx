// import 'react-quill/dist/quill.snow.css';
import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import { Input } from 'reactstrap';
import { AllTiles } from '../../components/AllTiles';
import Layout from '../../components/Layout';
import {
  headingStyle,
  heroSection,
  heroSectionHeading,
  heroSectionHeadingImageContainer,
} from '../../styles/styles';
import { getMood } from '../../util/database';
import { Tile } from '../../util/types';

const singleTileContainer = css`
  background-color: #ecf6ff;
  border-radius: 10px;
  box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;
  padding: 20px;
`;

const tileGrid = css`
  display: flex;
  align-items: center;

  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  grid-gap: 1.3rem;
  a {
    display: block;
    text-align: center;
    text-decoration: none;
    padding: 80px;
  }
`;

type Props = {
  username?: string;
  moods: Mood[];
  userId: number;
  tiles: Tile[];
};

type Mood = {
  id: number;
  title: string;
};

export default function Tiles(props: Props) {
  const [errors, setErrors] = useState<any[]>();
  const [day, setDay] = useState('');
  const router = useRouter();
  console.log(props);
  return (
    <Layout username={props.username}>
      <div>
        <Head>
          <title>Tiles</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div css={heroSection}>
          <div css={heroSectionHeadingImageContainer}>
            <div css={heroSectionHeading}>
              <div css={headingStyle}>
                <h2 className="header1-text">
                  Welcome to your Dashboard, {props.username}
                </h2>

                <p>
                  <h3>Create new entry for {day}</h3>
                </p>

                <form
                  onSubmit={async (event) => {
                    event.preventDefault();
                    console.log(props.userId);

                    const response = await fetch(`/api/dashboard/create`, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      // send request body to API route
                      body: JSON.stringify({
                        day: day,
                        userId: props.userId,
                        moodId: Number(event.currentTarget.mood.value),
                        achievements: event.currentTarget.achievements.value,
                        gratitude: event.currentTarget.gratitude.value,
                      }),
                    });

                    const tileResponseJson = await response.json();
                    console.log(tileResponseJson);

                    // Check if there is an errorMessage inside the json and update state
                    if ('errors' in tileResponseJson) {
                      setErrors(tileResponseJson.errors);
                      return;
                    }
                    router.reload();
                  }}
                >
                  <p>Select </p>

                  <Input
                    className="calendar-modal"
                    type="date"
                    placeholder="dd/mm/yyyy"
                    value={day}
                    required
                    onChange={(event) => {
                      setDay(event.currentTarget.value);
                    }}
                  />
                  <p>How do you feel today?</p>
                  <select id="mood" name="mood">
                    <option value="">Select Mood</option>
                    {props.moods.map((mood) => {
                      return (
                        <option key={mood.id} value={mood.id}>
                          {mood.title}
                        </option>
                      );
                    })}
                  </select>
                  <p>What are some achievements you are aiming for today?</p>
                  <textarea
                    name="achievements"
                    placeholder="What are some achievements you are aiming for"
                    max-length="10000"
                  />
                  <p>What are you grateful for today?</p>
                  <textarea
                    name="gratitude"
                    placeholder="What are your grateful for"
                    max-length="10000"
                  />
                  <button>Create entry</button>
                </form>
              </div>
              {/* <div>
                YOUR TILES
                {props.tiles.map((tile) => (
                  <div key={tile.id}>
                    Achievements: {tile.achievements}
                    <p />
                    Gratitude: {tile.gratitude}
                    <p />
                    Mood: {tile.moodId}
                    <p />
                    Day: {tile.day}
                  </div>
                ))}
              </div> */}
              <div>
                <h3>Your Tiles</h3>
              </div>
              <div css={tileGrid}>
                {props.tiles.map((tile) => {
                  return (
                    <div key={`tile-li-${tile.id}`} css={singleTileContainer}>
                      <div>
                        <Link href={`/dashboard/${tile.id}`}>
                          <a>Date: {tile.day}</a>
                        </Link>
                        Achievements: {tile.achievements}
                        <p />
                        Grateful for: {tile.gratitude}
                        <p />
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { getValidSessionByToken } = await import('../../util/database');

  // Authorization: Allow only logged-in users
  const isValidSession = await getValidSessionByToken(
    context.req.cookies.sessionToken,
  );
  const sessionToken = context.req.cookies.sessionToken;

  if (!isValidSession) {
    return {
      redirect: {
        permanent: false,
        destination: '/login?returnTo=/dashboard',
      },
    };
  }
  const baseUrl = process.env.BASE_URL;
  const tileResponse = await fetch(`${baseUrl}/api/dashboard/`, {
    method: 'GET',
    headers: {
      cookie: `sessionToken=${sessionToken}`,
    },
    credentials: 'include',
  });
  const tiles = await tileResponse.json();
  const moods = await getMood();

  return {
    props: { moods, userId: isValidSession.userId, tiles },
  };
}
