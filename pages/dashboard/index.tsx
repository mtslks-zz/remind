import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import Layout from '../../components/Layout';
import {
  headingStyle,
  heroSection,
  heroSectionHeading,
  heroSectionHeadingImageContainer,
} from '../../styles/styles';
import { getMood } from '../../util/database';

type Props = {
  username?: string;
  // moodId: number;
  allTiles: any;
  // gratitude: string;
  // achievements: string;
  // allTilesByValidSessionUser: any;
};

export default function Jobs(props: Props) {
  const [day, setDay] = useState('');
  const [achievements, setAchievements] = useState('');
  const [gratitude, setGratitude] = useState('');
  const [moodId, setMoodId] = useState('');
  const [errors, setErrors] = useState<any[]>();
  const router = useRouter();
  const [allTiles, setAllTiles] = useState(props.allTiles);

  async function clickHandler() {
    const response = await fetch(`/api/tiles/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      // send request body to API route
      body: JSON.stringify({
        day: day,
        moodId: moodId,
        achievements: achievements,
        gratitude: gratitude,
      }),
    });

    const {
      errors: [errorMessage],
    } = await response.json();

    // Check if there is an errorMessage inside the json and update state
    if (errorMessage) {
      // console.log('error in create.tsx', errorMessage);
      setErrors(errorMessage);
      return;
    }
    router.push(`/dashboard`);
  }

  return (
    <Layout username={props.username}>
      <div>
        <Head>
          <title>Tiles</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div css={heroSection}>
          <div css={heroSectionHeadingImageContainer}>
            <div css={heroSectionHeading}>
              <div css={headingStyle}>
                <h2 className="header1-text">
                  Your Dashboard, {props.username}
                </h2>
              </div>
            </div>{' '}
          </div>
        </div>
      </div>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  if (
    context.req.headers.host &&
    context.req.headers['x-forwarded-proto'] &&
    context.req.headers['x-forwarded-proto'] !== 'https'
  ) {
    return {
      redirect: {
        destination: `https://${context.req.headers.host}/dashboard`,
        permanent: true,
      },
    };
  }

  const response = await fetch(`${process.env.API_BASE_URL}/dashboard`, {
    method: 'GET',
    headers: {
      cookie: context.req.headers.cookie || '',
    },
  });

  // Wait for the response of the fetch inside /dashboard/index.ts and then transform it into json

  // ERROR: receiving it as text instead of json because it comes back in non-json format...
  const json = await response.text();

  return {
    props: { json },
  };
}
