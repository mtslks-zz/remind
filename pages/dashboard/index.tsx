import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import Layout from '../../components/Layout';
import QuoteCard from '../../components/QuoteGenerator';
import {
  buttonContainer,
  buttonStylesStandard,
  heroSectionHeadingImageContainer,
  singleTileContainer,
  tileFormStyle,
  tileGrid,
} from '../../styles/styles';
// import { getMood } from '../../util/database';
import { Tile } from '../../util/types';

type Props = {
  username?: string;
  // moods: Mood[];
  userId: number;
  tiles: Tile[];
};

// type Mood = {
//   id: number;
//   title: string;
// };

const datepickerStyle = css`
  ::-webkit-datetime-edit {
    font-size: 1.3em;
    padding: 0.4em;
  }
  ::-webkit-datetime-edit-text {
    padding: 0 0.1em;
  }
`;

// Dashboard styling
export const dashboardContainer = css`
  background-color: white;
  padding: 48px 24px;

  @media (max-width: 768px) {
    padding: 96px 24px;
  }
`;

const dashboardFrame = css`
  display: flex;
  flex-direction: column;
  width: 100vh;
  padding: 50px;

  @media (max-width: 1260px) {
    h1 {
      font-size: 2.5rem;
    }
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 3.5rem;
      text-align: left;
    }

    h3 {
      align-self: center;
      text-align: left;
    }
  }

  @media (max-width: 450px) {
    h1 {
      font-size: 2rem;
      line-height: 48px;
      margin-bottom: 0;
    }

    h3 {
      font-size: 1rem;
      align-self: left;
      text-align: left;
    }
  }

  h1 {
    margin-bottom: 12px;
  }

  h3 {
    text-align: left;

    @media (max-width: 768px) {
      text-align: left;
    }
  }
  textarea {
    width: 300vh;
    height: 200px;
    border: 1px solid #888;
    resize: none;
    font-size: 1.2rem;
    letter-spacing: 1px;
    padding: 10px;
    max-width: 100%;
    line-height: 1.5;
    border-radius: 5px;
    border: 1px solid #ccc;
    box-shadow: 1px 1px 1px #999;
  }
`;

export const dashboardHeading = css`
  display: flex;
  flex-direction: column;
  justify-content: left;
  align-items: left;
  width: 65%;
  height: 100%;
  margin: 0px 64px 64px 64px;
  padding: 32px 0px 64px 0px;

  @media (max-width: 768px) {
    width: 100%;
    padding: 0px 0px;
  }

  @media (max-width: 450px) {
    width: 100%;
    padding: 0px 0px;
  }
`;

export default function Tiles(props: Props) {
  const [errors, setErrors] = useState<any[]>();
  const [day, setDay] = useState('');
  const router = useRouter();
  // console.log(props);
  return (
    <Layout username={props.username}>
      <Head>
        <title>(re)mind | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section css={dashboardContainer}>
        <div css={heroSectionHeadingImageContainer}>
          <div css={dashboardHeading}>
            <div>
              <h2 className="header1-text">Your Dashboard</h2>
              <div css={buttonContainer}>
                <div css={buttonContainer}>
                  <div>
                    <a href="#tiles" css={buttonStylesStandard}>
                      My Entries
                    </a>
                  </div>
                  <div>
                    <Link href={`/users/${props.username}`}>
                      <a css={buttonStylesStandard}>My Profile</a>
                    </Link>
                  </div>
                </div>{' '}
              </div>
            </div>

            <div>
              <form
                css={dashboardFrame}
                onSubmit={async (event) => {
                  event.preventDefault();
                  // console.log(props.userId);
                  const response = await fetch(`/api/dashboard/create`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    // send request body to API route
                    body: JSON.stringify({
                      day: day,
                      userId: props.userId,
                      //  moodId: Number(event.currentTarget.mood.value),
                      achievements: event.currentTarget.achievements.value,
                      gratitude: event.currentTarget.gratitude.value,
                      affirmations: event.currentTarget.affirmations.value,
                    }),
                  });

                  const tileResponseJson = await response.json();
                  // console.log(tileResponseJson);

                  // Check if there is an errorMessage inside the json and update state
                  if ('errors' in tileResponseJson) {
                    setErrors(tileResponseJson.errors);
                    return;
                  }
                  router.reload();
                }}
              >
                <div>
                  <label htmlFor="date-picker">
                    <h2 className="header2-text">New Journal Entry | {day}</h2>
                  </label>
                </div>
                <input
                  css={datepickerStyle}
                  type="date"
                  placeholder="30/11/2021"
                  value={day}
                  min="2021-11-01"
                  max="2022-12-31"
                  required
                  onChange={(event) => {
                    setDay(event.currentTarget.value);
                  }}
                />

                {/* <div>
                  <label htmlFor="gratitude">
                    <h2>Set your mood for the day</h2>
                  </label>
                </div>
                <select id="mood" name="mood">
                  <option value="">Select Mood</option>
                  {props.moods.map((mood) => {
                    return (
                      <option key={mood.id} value={mood.id}>
                        {mood.title}
                      </option>
                    );
                  })}
                </select> */}
                <div>
                  <label htmlFor="achievements">
                    <h3>What would make today great?</h3>
                  </label>
                </div>

                <div>
                  <textarea
                    name="achievements"
                    placeholder="What would make today great? State your goals and targets you want to achieve today."
                    max-length="10000"
                  />
                </div>
                <div>
                  <label htmlFor="gratitude">
                    <h3>I am grateful for...</h3>
                  </label>
                </div>
                <div>
                  <textarea
                    name="gratitude"
                    placeholder="State 3 things you are grateful for today."
                    max-length="10000"
                  />
                </div>

                <div>
                  <label htmlFor="affirmations">
                    <h3>Daily affirmation</h3>
                  </label>
                </div>
                <div>
                  <textarea
                    name="affirmations"
                    placeholder="Set your daily affirmation ritual here by stating to yourself what you believe is true and important to you, and what you want to have manifested in your life."
                    max-length="10000"
                  />
                </div>
                <QuoteCard />
                <div>
                  <button css={buttonStylesStandard}>Save</button>
                </div>
              </form>
            </div>
          </div>
        </div>
        <a id="tiles">
          <div>
            <h2 className="header2-text">My Daily Entries</h2>
          </div>
        </a>
        <div css={tileGrid}>
          {props.tiles.map((tile) => {
            return (
              <div
                className="card"
                key={`tile-li-${tile.id}`}
                css={singleTileContainer}
              >
                <div>
                  <img src="/images/logo.png" alt="(re)mind logo on tile" />
                </div>
                <div className="content">
                  <Link passHref href={`/dashboard/${tile.id}`}>
                    <h2>
                      <a>{tile.day}</a>
                    </h2>
                  </Link>
                  <div>{tile.achievements}</div>
                  <div>{tile.gratitude}</div>
                  <div>{tile.affirmations}</div>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { getValidSessionByToken } = await import('../../util/database');

  // Authorization: Allow only logged-in users
  const isValidSession = await getValidSessionByToken(
    context.req.cookies.sessionToken,
  );
  const sessionToken = context.req.cookies.sessionToken;

  if (!isValidSession) {
    return {
      redirect: {
        permanent: false,
        destination: '/login?returnTo=/dashboard',
      },
    };
  }
  const baseUrl = process.env.BASE_URL;
  const tileResponse = await fetch(`${baseUrl}/api/dashboard/`, {
    method: 'GET',
    headers: {
      cookie: `sessionToken=${sessionToken}`,
    },
    credentials: 'include',
  });
  const tiles = await tileResponse.json();
  // const moods = await getMood();

  return {
    props: { /* moods,*/ userId: isValidSession.userId, tiles },
  };
}
