import 'react-quill/dist/quill.snow.css';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Layout from '../../components/Layout';
import { getEmailByTileId, getTileByTileId } from '../../util/database';

const ReactQuill = dynamic(() => import('react-quill'), { ssr: false });

export default function SingleTile(props: any) {
  const router = useRouter();
  async function deleteTileByTileI(id: any) {
    await fetch(`/api/dashboard/${props.tile.id}`, {
      method: 'DELETE',
    });
    router.push(`/dashboard`);
  }
  return (
    <>
      <Head>
        <title>{props.tile.day}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout username={props.username} />
      <div>
        <h2 style={{ textAlign: 'center' }}>{props.tile.day}</h2>
        <p>{}</p>
        <div
          dangerouslySetInnerHTML={{ __html: props.tile.moodId }}
          className="container-sm"
        ></div>
        <div style={{ display: 'flex', color: 'white !important' }}>
          {props.username ? (
            <button onClick={() => deleteTileByTileI(props.tile.id)}>
              Delete Tile
            </button>
          ) : (
            <a href={`mailto:${props.email.email}`} style={{ margin: 'auto' }}>
              Forward as email
            </a>
          )}
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps(context: any) {
  if (
    context.req.headers.host &&
    context.req.headers['x-forwarded-proto'] &&
    context.req.headers['x-forwarded-proto'] !== 'https'
  ) {
    return {
      redirect: {
        destination: `https://${context.req.headers.host}/dashboard/${context.query.tileId}`,
        permanent: true,
      },
    };
  }

  const tileid = context.query.tileId;

  const tile = await getTileByTileId(tileid);
  const email = await getEmailByTileId(tileid);
  return {
    props: {
      tile: tile || null,
      email: email || null,
    },
  };
}
