import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Layout from '../../components/Layout';
import { Errors, Mood, Tile } from '../../util/types';

export const singleTileContainer = css`
  width: 50vw;

  background-color: #ecf6ff;
  border-radius: 10px;
  box-shadow: rgba(0, 0, 0, 0.15) 0px 5px 15px 0px;
  padding: 10px;
  margin-top: 30px;
  margin-bottom: 20px;
  margin-left: 20px;
  display: flex;
`;
const singleTileStyle = css`
  font-size: 18px;
  padding: 10px;
  display: flex;
  flex-direction: column;
  margin: 10px;
`;
type Props = {
  username?: string;
  moods: Mood;
  tiles: Tile;
  errors: Errors[];
  day: string;
};

export default function SingleTile(props: Props) {
  const router = useRouter();

  if ('errors' in props) {
    return <div>Error: {props.errors[0].message}</div>;
  }

  if (!props.username) {
    return <div>no user passed</div>;
  }

  return (
    <Layout username={props.username}>
      {' '}
      <Head>
        <title>{props.day}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div css={singleTileContainer}>Test</div>
      <div css={singleTileStyle}>
        <div>
          <h2>Single Tile Page for {props.username}</h2>
          <div>Date: {props.tiles.day}</div>
          <div>Mood: {props.moods.title}</div>
          <div>Achievements: {props.tiles.achievements}</div>
          <div>Gratitude: {props.tiles.gratitude}</div>
        </div>
      </div>
    </Layout>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const { getValidSessionByToken, getMood } = await import(
    '../../util/database'
  );

  // Authorization: Allow only logged-in users
  const isValidSession = await getValidSessionByToken(
    context.req.cookies.sessionToken,
  );
  const sessionToken = context.req.cookies.sessionToken;

  if (!isValidSession) {
    return {
      redirect: {
        permanent: false,
        destination: '/login?returnTo=/dashboard',
      },
    };
  }
  const baseUrl = process.env.BASE_URL;
  const tileResponse = await fetch(
    `${baseUrl}/api/dashboard/${context.query.tileId}`,
    {
      method: 'GET',
      headers: {
        cookie: `sessionToken=${sessionToken}`,
      },
      credentials: 'include',
    },
  );
  const tiles = await tileResponse.json();
  const moods = await getMood();

  return {
    props: { userId: isValidSession.userId, tiles, moods },
  };
}
